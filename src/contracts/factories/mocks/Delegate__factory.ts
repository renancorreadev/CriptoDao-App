/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Delegate, DelegateInterface } from "../../mocks/Delegate";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Marketplace",
        name: "_delegateAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161018338038061018383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b60f3806100906000396000f3fe6080604052348015600f57600080fd5b506000805460405173ffffffffffffffffffffffffffffffffffffffff90911690603b908390369060d6565b600060405180830381855af49150503d80600081146074576040519150601f19603f3d011682016040523d82523d6000602084013e6079565b606091505b509091505060018115151460d35760405162461bcd60e51b815260206004820152601360248201527f64656c656761746563616c6c206661696c656400000000000000000000000000604482015260640160405180910390fd5b50005b818382376000910190815291905056fea164736f6c6343000804000a";

type DelegateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DelegateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Delegate__factory extends ContractFactory {
  constructor(...args: DelegateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delegateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Delegate> {
    return super.deploy(_delegateAddress, overrides || {}) as Promise<Delegate>;
  }
  override getDeployTransaction(
    _delegateAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_delegateAddress, overrides || {});
  }
  override attach(address: string): Delegate {
    return super.attach(address) as Delegate;
  }
  override connect(signer: Signer): Delegate__factory {
    return super.connect(signer) as Delegate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DelegateInterface {
    return new utils.Interface(_abi) as DelegateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Delegate {
    return new Contract(address, _abi, signerOrProvider) as Delegate;
  }
}
